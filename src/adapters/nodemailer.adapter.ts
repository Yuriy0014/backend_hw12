import dotenv from 'dotenv';
import nodemailer from 'nodemailer';

dotenv.config();
const { createTransport } = nodemailer;

const transporterEmail = process.env.EMAIL_ADDRESS;
const transporterPassword = process.env.EMAIL_PASSWORD;

type EmailInfo = { email: string; subject: string; message: string };

// Presentation layer
// 1. –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –ø–æ http / graphQL / webSocket (–∑–∞–ø—Ä–æ—Å - –æ—Ç–≤–µ—Ç).
// 2. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É (–º–∞–ø–ø–∏–Ω–≥) –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä., —Ñ—Ä–æ–Ω—Ç–æ–≤, –¥—Ä—É–≥–∏—Ö –±—ç–∫–µ–Ω–¥–æ–≤).
// 3. –ü–∞—Ä—Å–∏—Ç body, query, URI –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
// 4. –ü—Ä–∏ query –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ Data access —Å–ª–æ—é.
export class NodemailerAdapter {
  async sendMessage({ email, subject, message }: EmailInfo): Promise<boolean> {
    const transporter = createTransport({
      service: 'Yandex',
      auth: {
        user: transporterEmail,
        pass: transporterPassword,
      },
    });

    try {
      const info = await transporter.sendMail({
        from: `"Obi Wan Kenobi üëª" <${transporterEmail}>`,
        to: email,
        subject,
        html: message,
      });

      return !!info.accepted.length;
    } catch (error) {
      console.log('Error while sending email: ', error);

      return false;
    }
  }
}
